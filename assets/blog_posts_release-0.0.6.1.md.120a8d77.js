import{_ as e,o as t,c as o,Q as s}from"./chunks/framework.980cae92.js";const _=JSON.parse('{"title":"LMQL Release v0.0.6.1","description":"","frontmatter":{"date":"2023-05-03T00:00:00.000Z","title":"LMQL Release v0.0.6.1"},"headers":[],"relativePath":"blog/posts/release-0.0.6.1.md","filePath":"blog/posts/release-0.0.6.1.md"}'),r={name:"blog/posts/release-0.0.6.1.md"},a=s('<h1 id="lmql-v0-0-6-1" tabindex="-1">LMQL v0.0.6.1 <a class="header-anchor" href="#lmql-v0-0-6-1" aria-label="Permalink to &quot;LMQL v0.0.6.1&quot;">â€‹</a></h1><p><span class="date">May 3, 2023</span></p><p>We released LMQL v0.0.6.1, which contains several bug fixes and improvements. The most notable changes are:</p><ul><li><p><strong>Cache Layer Bug Fixes</strong> This release contains several fixes and improvements to the recently introduced cache layer.</p></li><li><p><strong>Stopping Phrases</strong> Stopping phrases specified via <code>STOPS_BEFORE</code> are now passed to the OpenAI API as <code>&quot;stop&quot;</code> parameter, decreasing the number of tokens used for the request. If you want to disable this (e.g. to allow speculative execution), you can specify the new decoder parameter <code>openai_nonstop=True</code>.</p></li><li><p><strong>Asynchronous Output Writers</strong> All output writers have been refactored to use asynchronous I/O. This should simplify integration with other asynchronous frameworks, e.g. for HTTP or Websocket APIs. We also added a new chapter on <a href="/docs/lib/output.html">Output Streaming</a> to the documentation.</p></li><li><p><strong>Output Writers for HTTP endpoints, WebSockets and Server-Sent Events</strong> Based on the updated output writer interface, we added three new output writers for serving LMQL queries as HTTP endpoints, WebSockets and via Server-Sent Events (SSE). To learn more, check their relatively simple implementations in the new <a href="https://github.com/eth-sri/lmql/tree/main/src/lmql/output" target="_blank" rel="noreferrer">lmql.output</a> module. We will also provide more documentation on how to use them, e.g. with <code>aiohttp</code> in the future.</p></li></ul>',4),n=[a];function i(l,p,c,d,u,h){return t(),o("div",null,n)}const f=e(r,[["render",i]]);export{_ as __pageData,f as default};
